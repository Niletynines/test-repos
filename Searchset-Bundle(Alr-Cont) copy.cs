// Generated by https://quicktype.io

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Dotnet
    {
        [JsonProperty("resourceType")]
        public string ResourceType { get; set; }

        [JsonProperty("id")]
        public Guid Id { get; set; }

        [JsonProperty("meta")]
        public Meta Meta { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("total")]
        public long Total { get; set; }

        [JsonProperty("link")]
        public Link[] Link { get; set; }

        [JsonProperty("entry")]
        public DotnetEntry[] Entry { get; set; }
    }

    public partial class DotnetEntry
    {
        [JsonProperty("fullUrl")]
        public string FullUrl { get; set; }

        [JsonProperty("resource")]
        public PurpleResource Resource { get; set; }

        [JsonProperty("search")]
        public Search Search { get; set; }
    }

    public partial class PurpleResource
    {
        [JsonProperty("resourceType")]
        public string ResourceType { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("meta")]
        public Meta Meta { get; set; }

        [JsonProperty("identifier")]
        public TelecomClass Identifier { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("timestamp")]
        public DateTimeOffset Timestamp { get; set; }

        [JsonProperty("entry")]
        public ResourceEntry[] Entry { get; set; }
    }

    public partial class ResourceEntry
    {
        [JsonProperty("fullUrl")]
        public string FullUrl { get; set; }

        [JsonProperty("resource", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyResource Resource { get; set; }

        [JsonProperty("extension", NullValueHandling = NullValueHandling.Ignore)]
        public EntryExtension[] Extension { get; set; }

        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public Data Data { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("resourceType")]
        public string ResourceType { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("status")]
        public Status Status { get; set; }

        [JsonProperty("category")]
        public PurpleCategory Category { get; set; }

        [JsonProperty("medicationReference")]
        public MedicationReference MedicationReference { get; set; }

        [JsonProperty("subject")]
        public Encounter Subject { get; set; }

        [JsonProperty("encounter")]
        public Encounter Encounter { get; set; }

        [JsonProperty("effectiveDateTime")]
        public DateTimeOffset EffectiveDateTime { get; set; }

        [JsonProperty("effectivePeriod")]
        public EffectivePeriodClass EffectivePeriod { get; set; }

        [JsonProperty("dateAsserted")]
        public DateTimeOffset DateAsserted { get; set; }

        [JsonProperty("dosage")]
        public Dosage[] Dosage { get; set; }
    }

    public partial class PurpleCategory
    {
        [JsonProperty("coding")]
        public Coding[] Coding { get; set; }
    }

    public partial class Coding
    {
        [JsonProperty("system", NullValueHandling = NullValueHandling.Ignore)]
        public string System { get; set; }

        [JsonProperty("code")]
        public string Code { get; set; }

        [JsonProperty("display", NullValueHandling = NullValueHandling.Ignore)]
        public string Display { get; set; }
    }

    public partial class Dosage
    {
        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("timing")]
        public Timing Timing { get; set; }

        [JsonProperty("doseAndRate")]
        public DoseAndRate[] DoseAndRate { get; set; }
    }

    public partial class DoseAndRate
    {
        [JsonProperty("doseQuantity")]
        public ValueQuantity DoseQuantity { get; set; }
    }

    public partial class ValueQuantity
    {
        [JsonProperty("value")]
        public double Value { get; set; }

        [JsonProperty("unit")]
        public Unit Unit { get; set; }

        [JsonProperty("system", NullValueHandling = NullValueHandling.Ignore)]
        public Uri System { get; set; }

        [JsonProperty("code", NullValueHandling = NullValueHandling.Ignore)]
        public CodeEnum? Code { get; set; }
    }

    public partial class Timing
    {
        [JsonProperty("repeat")]
        public Repeat Repeat { get; set; }
    }

    public partial class Repeat
    {
        [JsonProperty("frequency")]
        public long Frequency { get; set; }

        [JsonProperty("period")]
        public long Period { get; set; }

        [JsonProperty("periodUnit")]
        public string PeriodUnit { get; set; }
    }

    public partial class EffectivePeriodClass
    {
        [JsonProperty("start")]
        public DateTimeOffset Start { get; set; }
    }

    public partial class Encounter
    {
        [JsonProperty("reference")]
        public string Reference { get; set; }
    }

    public partial class MedicationReference
    {
        [JsonProperty("reference")]
        public string Reference { get; set; }

        [JsonProperty("display")]
        public string Display { get; set; }
    }

    public partial class EntryExtension
    {
        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("extension")]
        public PurpleExtension[] Extension { get; set; }
    }

    public partial class PurpleExtension
    {
        [JsonProperty("url")]
        public FluffyUrl Url { get; set; }

        [JsonProperty("valueString", NullValueHandling = NullValueHandling.Ignore)]
        public string ValueString { get; set; }

        [JsonProperty("valueId", NullValueHandling = NullValueHandling.Ignore)]
        public string ValueId { get; set; }

        [JsonProperty("extension", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyExtension[] Extension { get; set; }
    }

    public partial class FluffyExtension
    {
        [JsonProperty("url")]
        public PurpleUrl Url { get; set; }

        [JsonProperty("valueReference")]
        public ValueReference ValueReference { get; set; }
    }

    public partial class ValueReference
    {
        [JsonProperty("reference")]
        public string Reference { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }
    }

    public partial class FluffyResource
    {
        [JsonProperty("resourceType")]
        public string ResourceType { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("meta", NullValueHandling = NullValueHandling.Ignore)]
        public Meta Meta { get; set; }

        [JsonProperty("extension", NullValueHandling = NullValueHandling.Ignore)]
        public ResourceExtension[] Extension { get; set; }

        [JsonProperty("identifier", NullValueHandling = NullValueHandling.Ignore)]
        public IdentifierUnion? Identifier { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public Status? Status { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeUnion? Type { get; set; }

        [JsonProperty("subject", NullValueHandling = NullValueHandling.Ignore)]
        public Encounter Subject { get; set; }

        [JsonProperty("encounter", NullValueHandling = NullValueHandling.Ignore)]
        public Encounter Encounter { get; set; }

        [JsonProperty("date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Date { get; set; }

        [JsonProperty("author", NullValueHandling = NullValueHandling.Ignore)]
        public Encounter[] Author { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("confidentiality", NullValueHandling = NullValueHandling.Ignore)]
        public string Confidentiality { get; set; }

        [JsonProperty("custodian", NullValueHandling = NullValueHandling.Ignore)]
        public Encounter Custodian { get; set; }

        [JsonProperty("event", NullValueHandling = NullValueHandling.Ignore)]
        public Event[] Event { get; set; }

        [JsonProperty("section", NullValueHandling = NullValueHandling.Ignore)]
        public Section[] Section { get; set; }

        [JsonProperty("active", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Active { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public NameUnion? Name { get; set; }

        [JsonProperty("gender", NullValueHandling = NullValueHandling.Ignore)]
        public string Gender { get; set; }

        [JsonProperty("birthDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? BirthDate { get; set; }

        [JsonProperty("telecom", NullValueHandling = NullValueHandling.Ignore)]
        public TelecomClass Telecom { get; set; }

        [JsonProperty("contact", NullValueHandling = NullValueHandling.Ignore)]
        public Contact[] Contact { get; set; }

        [JsonProperty("class", NullValueHandling = NullValueHandling.Ignore)]
        public Class Class { get; set; }

        [JsonProperty("serviceType", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleCategory ServiceType { get; set; }

        [JsonProperty("period", NullValueHandling = NullValueHandling.Ignore)]
        public EffectivePeriodClass Period { get; set; }

        [JsonProperty("reasonCode", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleCategory[] ReasonCode { get; set; }

        [JsonProperty("diagnosis", NullValueHandling = NullValueHandling.Ignore)]
        public Diagnosis[] Diagnosis { get; set; }

        [JsonProperty("clinicalStatus", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleCategory ClinicalStatus { get; set; }

        [JsonProperty("verificationStatus", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleCategory VerificationStatus { get; set; }

        [JsonProperty("category", NullValueHandling = NullValueHandling.Ignore)]
        public ResourceCategory? Category { get; set; }

        [JsonProperty("severity", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleCategory Severity { get; set; }

        [JsonProperty("code", NullValueHandling = NullValueHandling.Ignore)]
        public CodeElement Code { get; set; }

        [JsonProperty("onsetString", NullValueHandling = NullValueHandling.Ignore)]
        public string OnsetString { get; set; }

        [JsonProperty("recordedDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? RecordedDate { get; set; }

        [JsonProperty("vaccineCode", NullValueHandling = NullValueHandling.Ignore)]
        public CodeElement VaccineCode { get; set; }

        [JsonProperty("patient", NullValueHandling = NullValueHandling.Ignore)]
        public Encounter Patient { get; set; }

        [JsonProperty("occurrenceDateTime", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? OccurrenceDateTime { get; set; }

        [JsonProperty("primarySource", NullValueHandling = NullValueHandling.Ignore)]
        public bool? PrimarySource { get; set; }

        [JsonProperty("expirationDate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? ExpirationDate { get; set; }

        [JsonProperty("criticality", NullValueHandling = NullValueHandling.Ignore)]
        public string Criticality { get; set; }

        [JsonProperty("reaction", NullValueHandling = NullValueHandling.Ignore)]
        public Reaction[] Reaction { get; set; }

        [JsonProperty("form", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleCategory Form { get; set; }

        [JsonProperty("ingredient", NullValueHandling = NullValueHandling.Ignore)]
        public Ingredient[] Ingredient { get; set; }

        [JsonProperty("medicationReference", NullValueHandling = NullValueHandling.Ignore)]
        public MedicationReference MedicationReference { get; set; }

        [JsonProperty("effectiveDateTime", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? EffectiveDateTime { get; set; }

        [JsonProperty("effectivePeriod", NullValueHandling = NullValueHandling.Ignore)]
        public EffectivePeriodClass EffectivePeriod { get; set; }

        [JsonProperty("dateAsserted", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? DateAsserted { get; set; }

        [JsonProperty("dosage", NullValueHandling = NullValueHandling.Ignore)]
        public Dosage[] Dosage { get; set; }

        [JsonProperty("bodySite", NullValueHandling = NullValueHandling.Ignore)]
        public CodeElement[] BodySite { get; set; }

        [JsonProperty("onsetDateTime", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? OnsetDateTime { get; set; }

        [JsonProperty("note", NullValueHandling = NullValueHandling.Ignore)]
        public string Note { get; set; }

        [JsonProperty("performedDateTime", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PerformedDateTime { get; set; }

        [JsonProperty("outcome", NullValueHandling = NullValueHandling.Ignore)]
        public Outcome Outcome { get; set; }

        [JsonProperty("result", NullValueHandling = NullValueHandling.Ignore)]
        public Encounter[] Result { get; set; }

        [JsonProperty("valueQuantity", NullValueHandling = NullValueHandling.Ignore)]
        public ValueQuantity ValueQuantity { get; set; }

        [JsonProperty("referenceRange", NullValueHandling = NullValueHandling.Ignore)]
        public ReferenceRange[] ReferenceRange { get; set; }

        [JsonProperty("interpretation", NullValueHandling = NullValueHandling.Ignore)]
        public Interpretation[] Interpretation { get; set; }
    }

    public partial class CodeElement
    {
        [JsonProperty("coding", NullValueHandling = NullValueHandling.Ignore)]
        public Coding[] Coding { get; set; }

        [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
        public string Text { get; set; }
    }

    public partial class Class
    {
        [JsonProperty("system")]
        public Uri System { get; set; }

        [JsonProperty("code")]
        public string Code { get; set; }
    }

    public partial class Contact
    {
        [JsonProperty("name")]
        public NameElement Name { get; set; }

        [JsonProperty("telecom")]
        public TelecomClass Telecom { get; set; }
    }

    public partial class NameElement
    {
        [JsonProperty("family")]
        public string Family { get; set; }

        [JsonProperty("given")]
        public string[] Given { get; set; }

        [JsonProperty("prefix")]
        public string Prefix { get; set; }

        [JsonProperty("use")]
        public string Use { get; set; }
    }

    public partial class TelecomClass
    {
        [JsonProperty("system")]
        public SystemEnum System { get; set; }

        [JsonProperty("value")]
        public string Value { get; set; }
    }

    public partial class Diagnosis
    {
        [JsonProperty("condition")]
        public MedicationReference Condition { get; set; }

        [JsonProperty("rank")]
        public long Rank { get; set; }
    }

    public partial class Event
    {
        [JsonProperty("code")]
        public Interpretation[] Code { get; set; }

        [JsonProperty("period")]
        public EventPeriod Period { get; set; }
    }

    public partial class Interpretation
    {
        [JsonProperty("coding")]
        public Class[] Coding { get; set; }
    }

    public partial class EventPeriod
    {
        [JsonProperty("start")]
        public DateTimeOffset Start { get; set; }

        [JsonProperty("end")]
        public string End { get; set; }
    }

    public partial class ResourceExtension
    {
        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("extension", NullValueHandling = NullValueHandling.Ignore)]
        public TentacledExtension[] Extension { get; set; }

        [JsonProperty("valueString", NullValueHandling = NullValueHandling.Ignore)]
        public string ValueString { get; set; }
    }

    public partial class TentacledExtension
    {
        [JsonProperty("url")]
        public string Url { get; set; }

        [JsonProperty("valueString")]
        public string ValueString { get; set; }
    }

    public partial class IdentifierElement
    {
        [JsonProperty("use")]
        public string Use { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("value")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Value { get; set; }
    }

    public partial class Ingredient
    {
        [JsonProperty("itemCodeableConcept", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleCategory ItemCodeableConcept { get; set; }

        [JsonProperty("strength")]
        public Strength Strength { get; set; }
    }

    public partial class Strength
    {
        [JsonProperty("numerator")]
        public ValueQuantity Numerator { get; set; }

        [JsonProperty("denominator")]
        public ValueQuantity Denominator { get; set; }
    }

    public partial class Meta
    {
        [JsonProperty("lastUpdated")]
        public DateTimeOffset LastUpdated { get; set; }
    }

    public partial class Outcome
    {
        [JsonProperty("text")]
        public string Text { get; set; }
    }

    public partial class Reaction
    {
        [JsonProperty("manifestation")]
        public PurpleCategory[] Manifestation { get; set; }
    }

    public partial class ReferenceRange
    {
        [JsonProperty("low")]
        public Low Low { get; set; }

        [JsonProperty("high")]
        public ValueQuantity High { get; set; }
    }

    public partial class Low
    {
        [JsonProperty("value")]
        public Value Value { get; set; }

        [JsonProperty("unit")]
        public CodeEnum Unit { get; set; }

        [JsonProperty("system", NullValueHandling = NullValueHandling.Ignore)]
        public Uri System { get; set; }

        [JsonProperty("code", NullValueHandling = NullValueHandling.Ignore)]
        public CodeEnum? Code { get; set; }
    }

    public partial class Section
    {
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("code")]
        public PurpleCategory Code { get; set; }

        [JsonProperty("entry")]
        public Encounter[] Entry { get; set; }
    }

    public partial class Search
    {
        [JsonProperty("mode")]
        public string Mode { get; set; }
    }

    public partial class Link
    {
        [JsonProperty("relation")]
        public string Relation { get; set; }

        [JsonProperty("url")]
        public string Url { get; set; }
    }

    public enum CodeEnum { Empty, Mg, Tablet };

    public enum Unit { Empty, Mcg, Mg, Tablet, Unit };

    public enum Status { Active, Completed, Final, Finished };

    public enum PurpleUrl { Reference };

    public enum TypeEnum { Encounter, Medication, Observation };

    public enum FluffyUrl { Id, References, ResourceType };

    public enum SystemEnum { Phone, UrnOid216724481020010 };

    public partial struct CategoryElement
    {
        public PurpleCategory PurpleCategory;
        public string String;

        public static implicit operator CategoryElement(PurpleCategory PurpleCategory) => new CategoryElement { PurpleCategory = PurpleCategory };
        public static implicit operator CategoryElement(string String) => new CategoryElement { String = String };
    }

    public partial struct ResourceCategory
    {
        public CategoryElement[] AnythingArray;
        public PurpleCategory PurpleCategory;

        public static implicit operator ResourceCategory(CategoryElement[] AnythingArray) => new ResourceCategory { AnythingArray = AnythingArray };
        public static implicit operator ResourceCategory(PurpleCategory PurpleCategory) => new ResourceCategory { PurpleCategory = PurpleCategory };
    }

    public partial struct IdentifierUnion
    {
        public IdentifierElement[] IdentifierElementArray;
        public TelecomClass TelecomClass;

        public static implicit operator IdentifierUnion(IdentifierElement[] IdentifierElementArray) => new IdentifierUnion { IdentifierElementArray = IdentifierElementArray };
        public static implicit operator IdentifierUnion(TelecomClass TelecomClass) => new IdentifierUnion { TelecomClass = TelecomClass };
    }

    public partial struct NameUnion
    {
        public NameElement[] NameElementArray;
        public string String;

        public static implicit operator NameUnion(NameElement[] NameElementArray) => new NameUnion { NameElementArray = NameElementArray };
        public static implicit operator NameUnion(string String) => new NameUnion { String = String };
    }

    public partial struct Value
    {
        public double? Double;
        public string String;

        public static implicit operator Value(double Double) => new Value { Double = Double };
        public static implicit operator Value(string String) => new Value { String = String };
    }

    public partial struct TypeUnion
    {
        public PurpleCategory PurpleCategory;
        public PurpleCategory[] PurpleCategoryArray;

        public static implicit operator TypeUnion(PurpleCategory PurpleCategory) => new TypeUnion { PurpleCategory = PurpleCategory };
        public static implicit operator TypeUnion(PurpleCategory[] PurpleCategoryArray) => new TypeUnion { PurpleCategoryArray = PurpleCategoryArray };
    }

    public partial class Dotnet
    {
        public static Dotnet FromJson(string json) => JsonConvert.DeserializeObject<Dotnet>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Dotnet self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                CodeEnumConverter.Singleton,
                UnitConverter.Singleton,
                StatusConverter.Singleton,
                PurpleUrlConverter.Singleton,
                TypeEnumConverter.Singleton,
                FluffyUrlConverter.Singleton,
                ResourceCategoryConverter.Singleton,
                CategoryElementConverter.Singleton,
                SystemEnumConverter.Singleton,
                IdentifierUnionConverter.Singleton,
                NameUnionConverter.Singleton,
                ValueConverter.Singleton,
                TypeUnionConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class CodeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CodeEnum) || t == typeof(CodeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case " ":
                    return CodeEnum.Empty;
                case "mg":
                    return CodeEnum.Mg;
                case "{tablet}":
                    return CodeEnum.Tablet;
            }
            throw new Exception("Cannot unmarshal type CodeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CodeEnum)untypedValue;
            switch (value)
            {
                case CodeEnum.Empty:
                    serializer.Serialize(writer, " ");
                    return;
                case CodeEnum.Mg:
                    serializer.Serialize(writer, "mg");
                    return;
                case CodeEnum.Tablet:
                    serializer.Serialize(writer, "{tablet}");
                    return;
            }
            throw new Exception("Cannot marshal type CodeEnum");
        }

        public static readonly CodeEnumConverter Singleton = new CodeEnumConverter();
    }

    internal class UnitConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Unit) || t == typeof(Unit?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case " ":
                    return Unit.Empty;
                case "  ":
                    return Unit.Unit;
                case "mcg":
                    return Unit.Mcg;
                case "mg":
                    return Unit.Mg;
                case "tablet":
                    return Unit.Tablet;
            }
            throw new Exception("Cannot unmarshal type Unit");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Unit)untypedValue;
            switch (value)
            {
                case Unit.Empty:
                    serializer.Serialize(writer, " ");
                    return;
                case Unit.Unit:
                    serializer.Serialize(writer, "  ");
                    return;
                case Unit.Mcg:
                    serializer.Serialize(writer, "mcg");
                    return;
                case Unit.Mg:
                    serializer.Serialize(writer, "mg");
                    return;
                case Unit.Tablet:
                    serializer.Serialize(writer, "tablet");
                    return;
            }
            throw new Exception("Cannot marshal type Unit");
        }

        public static readonly UnitConverter Singleton = new UnitConverter();
    }

    internal class StatusConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Status) || t == typeof(Status?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "active":
                    return Status.Active;
                case "completed":
                    return Status.Completed;
                case "final":
                    return Status.Final;
                case "finished":
                    return Status.Finished;
            }
            throw new Exception("Cannot unmarshal type Status");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Status)untypedValue;
            switch (value)
            {
                case Status.Active:
                    serializer.Serialize(writer, "active");
                    return;
                case Status.Completed:
                    serializer.Serialize(writer, "completed");
                    return;
                case Status.Final:
                    serializer.Serialize(writer, "final");
                    return;
                case Status.Finished:
                    serializer.Serialize(writer, "finished");
                    return;
            }
            throw new Exception("Cannot marshal type Status");
        }

        public static readonly StatusConverter Singleton = new StatusConverter();
    }

    internal class PurpleUrlConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PurpleUrl) || t == typeof(PurpleUrl?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "reference")
            {
                return PurpleUrl.Reference;
            }
            throw new Exception("Cannot unmarshal type PurpleUrl");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PurpleUrl)untypedValue;
            if (value == PurpleUrl.Reference)
            {
                serializer.Serialize(writer, "reference");
                return;
            }
            throw new Exception("Cannot marshal type PurpleUrl");
        }

        public static readonly PurpleUrlConverter Singleton = new PurpleUrlConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Encounter":
                    return TypeEnum.Encounter;
                case "Medication":
                    return TypeEnum.Medication;
                case "Observation":
                    return TypeEnum.Observation;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Encounter:
                    serializer.Serialize(writer, "Encounter");
                    return;
                case TypeEnum.Medication:
                    serializer.Serialize(writer, "Medication");
                    return;
                case TypeEnum.Observation:
                    serializer.Serialize(writer, "Observation");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }

    internal class FluffyUrlConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FluffyUrl) || t == typeof(FluffyUrl?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "id":
                    return FluffyUrl.Id;
                case "references":
                    return FluffyUrl.References;
                case "resourceType":
                    return FluffyUrl.ResourceType;
            }
            throw new Exception("Cannot unmarshal type FluffyUrl");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FluffyUrl)untypedValue;
            switch (value)
            {
                case FluffyUrl.Id:
                    serializer.Serialize(writer, "id");
                    return;
                case FluffyUrl.References:
                    serializer.Serialize(writer, "references");
                    return;
                case FluffyUrl.ResourceType:
                    serializer.Serialize(writer, "resourceType");
                    return;
            }
            throw new Exception("Cannot marshal type FluffyUrl");
        }

        public static readonly FluffyUrlConverter Singleton = new FluffyUrlConverter();
    }

    internal class ResourceCategoryConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ResourceCategory) || t == typeof(ResourceCategory?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<PurpleCategory>(reader);
                    return new ResourceCategory { PurpleCategory = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<CategoryElement[]>(reader);
                    return new ResourceCategory { AnythingArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type ResourceCategory");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ResourceCategory)untypedValue;
            if (value.AnythingArray != null)
            {
                serializer.Serialize(writer, value.AnythingArray);
                return;
            }
            if (value.PurpleCategory != null)
            {
                serializer.Serialize(writer, value.PurpleCategory);
                return;
            }
            throw new Exception("Cannot marshal type ResourceCategory");
        }

        public static readonly ResourceCategoryConverter Singleton = new ResourceCategoryConverter();
    }

    internal class CategoryElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CategoryElement) || t == typeof(CategoryElement?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new CategoryElement { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<PurpleCategory>(reader);
                    return new CategoryElement { PurpleCategory = objectValue };
            }
            throw new Exception("Cannot unmarshal type CategoryElement");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (CategoryElement)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.PurpleCategory != null)
            {
                serializer.Serialize(writer, value.PurpleCategory);
                return;
            }
            throw new Exception("Cannot marshal type CategoryElement");
        }

        public static readonly CategoryElementConverter Singleton = new CategoryElementConverter();
    }

    internal class SystemEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(SystemEnum) || t == typeof(SystemEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "phone":
                    return SystemEnum.Phone;
                case "urn:oid:2.16.724.4.8.10.200.10":
                    return SystemEnum.UrnOid216724481020010;
            }
            throw new Exception("Cannot unmarshal type SystemEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (SystemEnum)untypedValue;
            switch (value)
            {
                case SystemEnum.Phone:
                    serializer.Serialize(writer, "phone");
                    return;
                case SystemEnum.UrnOid216724481020010:
                    serializer.Serialize(writer, "urn:oid:2.16.724.4.8.10.200.10");
                    return;
            }
            throw new Exception("Cannot marshal type SystemEnum");
        }

        public static readonly SystemEnumConverter Singleton = new SystemEnumConverter();
    }

    internal class IdentifierUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(IdentifierUnion) || t == typeof(IdentifierUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<TelecomClass>(reader);
                    return new IdentifierUnion { TelecomClass = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<IdentifierElement[]>(reader);
                    return new IdentifierUnion { IdentifierElementArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type IdentifierUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (IdentifierUnion)untypedValue;
            if (value.IdentifierElementArray != null)
            {
                serializer.Serialize(writer, value.IdentifierElementArray);
                return;
            }
            if (value.TelecomClass != null)
            {
                serializer.Serialize(writer, value.TelecomClass);
                return;
            }
            throw new Exception("Cannot marshal type IdentifierUnion");
        }

        public static readonly IdentifierUnionConverter Singleton = new IdentifierUnionConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class NameUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(NameUnion) || t == typeof(NameUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new NameUnion { String = stringValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<NameElement[]>(reader);
                    return new NameUnion { NameElementArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type NameUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (NameUnion)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.NameElementArray != null)
            {
                serializer.Serialize(writer, value.NameElementArray);
                return;
            }
            throw new Exception("Cannot marshal type NameUnion");
        }

        public static readonly NameUnionConverter Singleton = new NameUnionConverter();
    }

    internal class ValueConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Value) || t == typeof(Value?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new Value { Double = doubleValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Value { String = stringValue };
            }
            throw new Exception("Cannot unmarshal type Value");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Value)untypedValue;
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            throw new Exception("Cannot marshal type Value");
        }

        public static readonly ValueConverter Singleton = new ValueConverter();
    }

    internal class TypeUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeUnion) || t == typeof(TypeUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<PurpleCategory>(reader);
                    return new TypeUnion { PurpleCategory = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<PurpleCategory[]>(reader);
                    return new TypeUnion { PurpleCategoryArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type TypeUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (TypeUnion)untypedValue;
            if (value.PurpleCategoryArray != null)
            {
                serializer.Serialize(writer, value.PurpleCategoryArray);
                return;
            }
            if (value.PurpleCategory != null)
            {
                serializer.Serialize(writer, value.PurpleCategory);
                return;
            }
            throw new Exception("Cannot marshal type TypeUnion");
        }

        public static readonly TypeUnionConverter Singleton = new TypeUnionConverter();
    }
}
